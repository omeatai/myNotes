    elif feedback_type == "referral":
        instance = ReferralFeedback.objects.get(pk=data)
        MSTeamsNotificationHandler.send_referral_feedback_notification(instance)

UPDATE_OR_CREATE

https://docs.djangoproject.com/en/4.1/ref/models/querysets/#update-or-create
#update_or_create can also be written in the following way -

updated_values = {'gender': 'M', age=10}
try:
    obj = Profile.objects.get(first_name='Argo', last_name='Saha')
    for key, value in updated_values.iteritems():
        setattr(obj, key, value)
    obj.save()
except Profile.DoesNotExist:
    obj = Profile(first_name='Argo', last_name='Saha', age=10, gender='M')
    obj.save()

OR

defaults = {'first_name': 'Bob'}
try:
    obj = Person.objects.get(first_name='John', last_name='Lennon')
    for key, value in defaults.items():
        setattr(obj, key, value)
    obj.save()
except Person.DoesNotExist:
    new_values = {'first_name': 'John', 'last_name': 'Lennon'}
    new_values.update(defaults)
    obj = Person(**new_values)
    obj.save()

#which can easily be simplified by:

updated_values = {'gender': 'M', age=10}

obj, created = Profile.objects.update_or_create(
    first_name='Argo', last_name='Saha',
    defaults=updated_values
)

OR

obj, created = Person.objects.update_or_create(
    first_name='John', last_name='Lennon',
    defaults={'first_name': 'Bob'},
)


GET_OR_CREATE

https://docs.djangoproject.com/en/4.1/ref/models/querysets/#django.db.models.query.QuerySet.get_or_create

try:
    obj = Person.objects.get(first_name='John', last_name='Lennon')
except Person.DoesNotExist:
    obj = Person(first_name='John', last_name='Lennon', birthday=date(1940, 10, 9))
    obj.save()

#which can easily be simplified by:

obj, created = Person.objects.get_or_create(
    first_name='John',
    last_name='Lennon',
    defaults={'birthday': date(1940, 10, 9)},
)



<img src="{{ post.image.url }}" alt="photo" />
<img src="/media/images/default.jpg" alt="photo" />

Username: rain1, 2, 3, 4, 5
Password: Apple12345!

wqhnbboxciinejsf

import smtplib
smtplib0bj = smtplib.SMTP("smtp.gmail.com", 587)
smtplibObj.ehlo()
smtplibObj.starttls()
smtplibobj.login("shanjairaj777@gmail.com", "vqhxojhbshfsrrqb")
smtplibObj.sendmail("shanjairaj777@gmail.com",
"shanjairajvlogs@gmail.com", "Subject:Hello\nHow are you?")
smtplibObj.quit()

FEEDBACK_WEBHOOK
https://drohealth142.webhook.office.com/webhookb2/78321684-bf56-45fd-acf4-e936c21ddcef@b08bd131-7ae3-4440-a1b2-30d6220cf1b5/IncomingWebhook/a1a31b00b23941c48f1ed3c7e11030e8/23b139d9-2199-4e97-b12f-0dbd7bb047d1

PROVIDUS_WEBHOOK
https://drohealth142.webhook.office.com/webhookb2/78321684-bf56-45fd-acf4-e936c21ddcef@b08bd131-7ae3-4440-a1b2-30d6220cf1b5/IncomingWebhook/6d079f1e12e44c4c861bec3f0f4aa437/23b139d9-2199-4e97-b12f-0dbd7bb047d1

admin	  admin@gmail.com	            Ifeanyi	Omeata	True	July 2, 2022, 9:45 p.m.
admin2	jamesharrison@example.com	  James	Harrison	True	July 6, 2022, 9:44 a.m.
admin3	tombradley@example.com	    Tom	Bradley	    True	July 24, 2022, 2 p.m. password123
admin4	marycombs@example.com	      Mary	Combs	    True	July 24, 2022, 2:11 p.m.
myadmin	petercambridge@example.com	Peter	Cambridge	True	July 18, 2022, 8:14 p.m.

touch tasks.py
celery -A tasks worker --loglevel=info

celery -A drohealth worker --loglevel=info
celery -A drohealth worker -l info

python manage.py runserver

python manage.py test feedback/tests --keepdb --verbosity=2

iomeata
ifeanyiomeata123


python/django - "Cannot use ImageField because Pillow is not installed"

https://pillow.readthedocs.io/en/latest/installation.html

pip uninstall Pillow
pip install Pillow==8.3.1

python -m pip uninstall Pillow
python -m pip install Pillow==8.3.1

$ python -m pip install --upgrade pip
$ python -m pip install --upgrade pillow
$ python -m pip install --upgrade -r requirements.txt

python -m pip uninstall -r requirements.txt

pip install $(grep -ivE "pkg1|pkg2|pkg3" requirements.txt)
python -m pip install --upgrade $(grep -ivE "pillow" requirements.txt)

pip install --upgrade --force-reinstall Pillow==2.4.0



Teams notification for when Providus users sign up and join the partner.

Teams notification for when users select Providus as response to "how heard about DRO Health"

Teams notification for when Providus users completes a service.

- When a partner user books and completes an appointment
- When a partner user order drugs and 
- When a partner user books a diagnostic test





Django Update Methods:

https://stackoverflow.com/questions/4108258/update-model-django-through-kwargs

1.
As long as the PK is the same, the existing row will be overwritten.
obj = Object(index=id, **fields)
obj.save()

2.
def update_object(obj, **kwargs):
    for k, v in kwargs.items():
        setattr(obj, k, v)
    obj.save()

3.
model = Model.objects.filter(pk=pk)
model.update(**kwargs)

4.
#If you know you want to create it:
# Book.objects.create(**fields)
#Assuming you need to check for an existing instance, you can find it with get or create:
instance, created = Book.objects.get_or_create(slug=slug, defaults=fields)
if not created:
    for attr, value in fields.iteritems(): 
        setattr(instance, attr, value)
    instance.save()

5.
Book.objects.filter(id=id).update(**fields)

6.
obj, created = Object.objects.update_or_create(index=id, defaults={**fields})

7.
#you can simply update using methods after filter() query
obj = Object.objects.filter(index=id).update(**fields) # fields your object(dict) may be **kwargs

8.
# if its a .get() method,
obj = Object.objects.get(index=id)
obj['key1'] = 'value1'
obj.save()



@receiver(pre_save, sender=MyModel)
def do_something_if_changed(sender, instance, **kwargs):
    try:
        obj = sender.objects.get(pk=instance.pk)
    except sender.DoesNotExist:
        pass # Object is new, so field hasn't technically changed, but you may want to do something else here.
    else:
        if not obj.some_field == instance.some_field: # Field has changed
            # do something




class UpdateName(generics.UpdateAPIView):
    queryset = ClientUser.objects.all()
    serializer_class = ClientNameSerializer
    permission_classes = (permissions.IsAuthenticated,)

    def update(self, request, *args, **kwargs):
        instance = self.get_object()
        instance.name = request.data.get("name")
        instance.save()

        serializer = self.get_serializer(instance)
        serializer.is_valid(raise_exception=True)
        self.perform_update(serializer)

        return Response(serializer.data)


from django.db import transaction

with  transaction.atomic():
    stories = Story.objects.filter(introtext='')
    for story in stories:
        introtext = story.content[0:(story.content.find('.'))] + ".</p>" 
        Story.objects.filter(pk=story.pk).update(introtext=introtext)


    def create(self, validated_data):
        """Create and return Mental Health Feedback data."""
        data = validated_data
        existing_feedback = MentalHealthFeedback.objects.get(user=self.context['request'].user, subscription=data['subscription'])
        if existing_feedback:
            existing_feedback.subscription = data['subscription']
            existing_feedback.session_rating = data['session_rating']
            existing_feedback.session_review  = data['session_review']
            existing_feedback.follow_up = data['follow_up']
            existing_feedback.no_follow_up_review = data['no_follow_up_review']
            existing_feedback.nps_rating = data['nps_rating']
            existing_feedback.nps_review = data['nps_review']
            existing_feedback.save()
            return existing_feedback
        return MentalHealthFeedback.objects.create(user=self.context['request'].user,
                                                   is_complete=True,
                                                   **validated_data)











I was able to solve mine by going to this link in the docs:
https://pillow.readthedocs.io/en/latest/installation.html

Answer: PILLOW VERSION WILL NOT WORK IN A PYTHON VERSION IT WAS NOT MADE FOR!

So I had to check the chart. I was running django on python==3.9.13, so I needed to uninstall the pillow==7.2.0 to Install pillow==8.3.1 for my python version 3.9.13 and Boom it started working.

[![enter image description here][1]][1]


  [1]: https://i.stack.imgur.com/jSRn8.png

 I did this:

    pip uninstall Pillow
    pip install Pillow==8.3.1

OR

    python -m pip uninstall Pillow
    python -m pip install Pillow==8.3.1

So it all depends on the python version you are running pillow on. 



"""Fields
  "id", "var_name", "display_name", "package_name", "package_literal", "price", "price_currency",
  "is_free", "frequency", "initial_min_subscription", "min_subscription", "visibility", "max_subscriber", "features", "add_ons"
"""

celery -A drohealth worker -l info

python manage.py test feedback/tests --keepdb --verbosity=2

celery
Jenkins
centrix
DJango Admin

Unit-testing

be298-2f3e413e07-0c4b69c5ce-3d3325eb21-526fa9a1e7-3c2c9616d6-e64bbb293e-cfa6b0d6f7-9741eea49d-fd42262c0b-ff68ca5425-7b485516ee-3dedda1c8b-8c78848a9d-ed69994916-a86af2bb62-2ba16

Username: rain1, 2, 3, 4, 5

Password: Apple12345!



username count be rain1 or rain2 or rain3 etc


alias pym="python3 manage.py"
alias djm="django-admin"
alias pym:mm='python3 manage.py makemigrations'
alias pym:m='python3 manage.py migrate'
alias pym:r='python3 manage.py runserver'
alias pym:app='python3 manage.py startapp'
alias s:env='source env/bin/activate'
alias ga*='git add *'
alias gcm='git commit -m'
              
pip install -r requirements.txt

-sudo -u postgres psql # ubuntu command to access the postgres terminal
-CREATE DATABASE drohealth;
-CREATE USER myprojectuser WITH PASSWORD 'password';
-ALTER ROLE myprojectuser SET client_encoding TO 'utf8';
-ALTER ROLE myprojectuser SET default_transaction_isolation TO 'read committed';
-ALTER ROLE myprojectuser SET timezone TO 'Africa/Lagos';
-CREATE EXTENSION pg_trgm; # for full text search - evaluate the similarity of two strings by the number of “trigrams” they share.
-CREATE EXTENSION unaccent; # search without worrying about accented characters, useful in different languages
-GRANT ALL PRIVILEGES ON DATABASE drohealth TO myprojectuser;

-ALTER USER myprojectuser CREATEDB;


python manage.py test --keepdb

python manage.py test feedback/tests --keepdb --verbosity=2

python manage.py test --verbosity=2

ALTER USER django CREATEDB;

GRANT ALL PRIVILEGES ON test_finance.* TO 'django'@'localhost';

python manage.py test --keepdb

rabbit qi
celery

127:0:0:1/mobile

https://dev.drohealth.com/mobile/



-python manage.py makemigrations
-python manage.py migrate
-python manage.py createsuperuser # create a user with d details
-python manage.py collectstatic
-python manage.py runserver


SENDY_HOST=None
SENDY_API_KEY=None
SENDY_LIST_ID=None
SWYS_BASE_URL=None


pip install --upgrade numpy

pip uninstall numpy
pip install numpy 
pip install numpy<1.23.0,>=1.16.5
pip install numpy==1.22.0

pip install virtualenv

alias python=python3 

sudo nano ~/.bash_profile
source ~/.bash_profile

sudo nano /etc/paths

PYTHONPATH="/Me/Documents/mydir:$PYTHONPATH"
export PYTHONPATH


virtualenv env --python=/Library/Frameworks/Python.framework/Versions/3.9/bin/python3.9
export PYTHONPATH=/Library/Frameworks/Python.framework/Versions/3.9/bin/python3.9

/Library/Frameworks/Python.framework/Versions/3.9/bin/python3.9
/Library/Frameworks/Python.framework/Versions/3.10/bin/python3


On MAC OS you can simply find the location of python/python3 by using the command which python or which python3. (works for Linux too)

And it should give something like:

For python

/usr/local/bin/python
For python3

/Library/Frameworks/Python.framework/Versions/3.9/bin/python3
Export the path to your bash_profile



python -m venv venv
venv\Scripts\activate.bat
python -m pip install weasyprint
python -m weasyprint --info

pip install cairocffi
pip install cairosvg



In your terminal type

sudo nano ~/.bash_profile

Enter your password and paste the following lines

PYTHONPATH="/Library/Frameworks/Python.framework/Versions/3.9/bin/python3"
export PYTHONPATH

Press control + x to exit, and press y for saving on being asked to save

Press `enter' to return to terminal window

Source it using the following command in terminal, run

source ~/.bash_profile

Path to python3 should be updated now!!





echo "alias python=/Library/Frameworks/Python.framework/Versions/3.9/bin/python3" >> ~/.zshrc
echo "alias python=/Library/Frameworks/Python.framework/Versions/3.10/bin/python3" >> ~/.zshrc
ln -s -f /usr/bin/python3 /Library/Frameworks/Python.framework/Versions/3.10/bin/python3

ln -s -f /usr/local/bin/python3.9 /usr/local/bin/python

admin/
api/v1/ auth/login/ [name='login']
api/v1/ auth/logout/ [name='logout']
api/v1/ auth/forgot-password [name='forgot-password']
api/v1/ auth/verify/<str:encoded_email> [name='verify_email']
api/v1/ auth/register/ [name='api-register']
api/v1/ auth/reset-password/<str:encoded_email> [name='reset-password']
api/v1/ pickups/request [name='pickup_request']
api/v1/ auth/reset-password/<str:encoded_email> [name='reset-password']
api/v1/ pickups/accept/<int:id>/ [name='accept_item']
api/v1/ pickups/update/<int:id>/ [name='pickups-update']




http://127.0.0.1:18000/api/v1/auth/login/


admin@example.com
123456




python manage.py test --keepdb

python manage.py test feedback/tests --keepdb

ALTER USER django CREATEDB;



rabbit qi
celery

127:0:0:1/mobile

https://dev.drohealth.com/mobile/


path('products/', include('product.urls')),


from django.urls import path
from . import views


urlpatterns = [
    path('productlist/', views.list_products, name='list-products'),
]


### 8. Apply Basic Authentication - [here]()


# self.validate(self.context['request'].data)


cd repo2
git checkout master
git remote add r1remote **url-of-repo1**
git fetch r1remote
git merge r1remote/master --allow-unrelated-histories
git remote rm r1remote

cd <location of local repo.>
git remote set-url origin <url>
git push -u origin master


C:\Users\Ifeanyi-PC\AppData\Local\Programs\Python







####################################################################################################
####################################################################################################
####################################################################################################
####################################################################################################


class CustomNotification(models.Model):
    """Create and Enforce your placholder variable names to be used in the messages and subject fields
    - Reocurring flag should only work on custom messages only
    - (Target date) and (weekdays and time) are mutually exclusive fields
    """
    
    name = models.CharField(_("Name"), max_length=255)
    notification_type = models.CharField(_("Notification Type"), choices=[("system", "System"), ("custom", "Custom")], 
        default="custom", max_length=15)
    system_notification = models.CharField(choices=SYSTEM_NOTIFICATIONS, max_length=255, null=True, blank=True)
    message = models.TextField(verbose_name=_("Message"), help_text="""Use the following placeholder variables in your 
                               message content. [first_name]: User First name, [last_name]: Last Name etc.""")
    subject = models.CharField(_("Subject"), max_length=255, help_text="""Use the following placeholder variables in your 
                               message content. [first_name]: User First name, [last_name]: Last Name etc.""")
    reocurring = models.BooleanField(default=False)
    target_date = models.DateTimeField(null=True, blank=True)
    weekdays = ArrayField(models.CharField(choices=WEEKDAYS, max_length=25), null=True, blank=True)
    time = models.TimeField(null=True, blank=True)
    channel = ArrayField(models.CharField(choices=[("push", "Push"), ("sms", "SMS"), ("email", "Email")], max_length=10))
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    
class RecipientConfiguration(models.Model):
    """Recipient Configuration are not compulsory when it's system notification
    You can also filter recipient of a system notification with this configuration.
    Use other recievers when the email or sms recipient is not a registered user.
    """
    custom_notification = models.OneToOneField(CustomNotification, on_delete=models.CASCADE)
    gender = ArrayField(models.CharField(choices=[("male", "Male"), ("female", "Female")], max_length=10), null=True, blank=True)
    user_type = ArrayField(
        models.CharField(
            choices=[("patient", "Patient"),("doctor", "Doctor"),("partner","Partner"),("pharmacy","Pharmacy")], max_length=15
        ),
        null=True, blank=True
    )
    country = ArrayField(CountryField(), null=True, blank=True)
    state = ArrayField(models.CharField(choices=STATE_CHOICES, max_length=255), null=True, blank=True)
    age_group = ArrayField(models.PositiveIntegerField(), size=2, null=True, blank=True)
    users = models.ManyToManyField(settings.AUTH_USER_MODEL)
    other_email_receivers = ArrayField(models.EmailField(), null=True, blank=True)
    other_sms_receivers = ArrayField(PhoneNumberField(), null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)


var xsrfCookie = postman.getResponseCookie("csrftoken");
postman.setEnvironmentVariable('csrftoken', xsrfCookie.value);


Request Method:	GET
Request URL:	http://127.0.0.1:8000/accounts/profile/
Using the URLconf defined in drohealth.urls, Django tried these URL patterns, in this order:

login/ [name='login']
login-action/ [name='login-action']
logout/ [name='logout']
reset/ [name='password_reset']
reset/done/ [name='password_reset_done']
reset/<uidb64>/<token>/ [name='password_reset_confirm']
reset/complete/ [name='password_reset_complete']
settings/password/ [name='password_change']
settings/password/done/ [name='password_change_done']
api/
.well-known/security.txt
apple-app-site-association
verify-email/<uidb64>/<email>/<token>/ [name='verify_email']
doctor/
partner/
chat/
myhealth/
covid/
admin/
^chaining/
patients/
payment/
coupon/
notifications/
appointments/
drugs/
announcements/
messages/
diagnostics/
logistics/
changelog/
orders/
pharmacies/
invoices/
analytics/
community/
diary/
custom_subscription/
subscription/
diet_management/
cvd/
womens-health/
mental_health/
feedback/
assessments/
paygateplus/
swys/
special_services/
^swagger(?P<format>\.json|\.yaml)$ [name='schema-json']
^mobile/$ [name='schema-swagger-ui']
^redoc/$ [name='schema-redoc']
^ckeditor/
^media/(?P<path>.*)$


Doctor Rating Api List
http://127.0.0.1:8000/feedback/api/patient/rate-doctor/


http://127.0.0.1:8000/patients/api/login/
{
    "token": "f02acd6c3cdbbe1dce2fa01de4062c7fe81e779a"
}


from django.contrib.auth import authenticate, login

def my_view(request):
    username = request.POST['username']
    password = request.POST['password']
    user = authenticate(request, username=username, password=password)
    if user is not None:
        login(request, user)
        # Redirect to a success page.
        ...
    else:
        # Return an 'invalid login' error message.
        ...

from rest_framework import serializers
from foo.models import FooBar

class FooBarSerializer(serializers.ModelSerializer):
    id = serializers.ReadOnlyField()

    class Meta:
        model = FooBar

        fields = ('id','title')
        read_only_fields = ['id']
    def create(self, validated_data):
        # Create the Foo instance
        foo = FooBar.objects.create(title=validated_data['title'])
        return foo
    def update(self, instance, validated_data):
        # Update the Foo instance
        instance.title = validated_data['title']
        instance.save()
        return instance


The perform_update method will be ran if you send a PUT or PATCH request. What you want to do is to mark messages as True whenever user gets the messages. So you can either override get_queryset or list and retrieve functions.

For example you can try this:

class MessagesViewSet(ModelViewSet):
    """
    A simple ViewSet for viewing and editing the messages
    associated with the user.
    """
    authentication_classes = [TokenAuthentication, ]
    permission_classes = [IsAuthenticated]
    serializer_class = MessageSerializer
    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]
    filterset_fields = FILTERS.FILTER_SET
    search_fields = FILTERS.SEARCH_FIELDS
    ordering_fields = FILTERS.ORDERING_FIELDS
    ordering = [MessageFields.DATE, ]

    def get_user(self):
        user = self.request.user
        return user

    def get_queryset(self):
        return Message.objects.filter(sent_to=self.get_user())

    def list(self, request):
        serializer = MessageSerializer(self.get_queryset(), many=True)
        for instance in serializer.data:
            instance['mark_read'] = True
        serializer.save()
        return Response(serializer.data)


    def perform_update(self, serializer):
        """Update the mental health feedback."""
        serializer.save(user=self.request.user)


instance = PostBookingFeedback.objects.get(user=request.user)
        if instance and request.method == 'POST':
            return Response(
                {'data': 'There exists a rating for this review. Use PATCH.',
                 'id': instance.id}, status.HTTP_400_BAD_REQUEST)
        request.data['user'] = request.user.id
        request.data['appointment'] = Appointment.objects.get(user=request.user.id).id
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        serializer.save(user=request.user)
        headers = self.get_success_headers(serializer.data)
        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)















This is if you have both the versions installed.

Go to This PC → Right-click → Click on Properties → Advanced System Settings.

You will see the System Properties. From here navigate to the Advanced Tab -> Click on Environment Variables.

You will see a top half for the user variables and the bottom half for System variables.

Check the System Variables and double-click on the Path (to edit the Path).

Check for the path of Python(which you wish to run i.e. Python 2.x or 3.x) and move it to the top of the Path list.

Restart the Command Prompt, and now when you check the version of Python, it should correctly display the required version.






class  MentalHealthSerializer(serializers.ModelSerializer):

    class Meta:
        model =  MentalHealthFeedback
        exclude = ('user', 'subscription', 'is_complete')

    def validate(self, validated_data):
        user = self.context['request'].user.id,
        user_search = MentalHealthFeedback.objects.filter(user=user)
        if not user_search.exists():
            return validated_data
        raise serializers.ValidationError('You have already submitted your feedback!')

    def create(self, validated_data):

        try:
            subscription = self.context['request'].user.patient.subscription
        except:
            subscription = None

        if validated_data:
            create = MentalHealthFeedback.objects.create(
                session_rating=validated_data.get('session_rating'),
                session_review=validated_data.get('session_review'),
                follow_up=validated_data.get('follow_up'),
                no_follow_up_review=validated_data.get('no_follow_up_review'),
                nps_rating=validated_data.get('nps_rating'),
                nps_review=validated_data.get('nps_review'),
                is_complete=True,
                user=self.context['request'].user,
                subscription=subscription
            )

            return create




from django.conf import settings
from django.contrib.auth.models import User
from accounts.serializers import CustomPasswordResetSerializer, SupportContactSerializer
from patients.models import Patient
from rest_framework import generics, status, viewsets
from rest_framework.views import APIView
from rest_framework.renderers import JSONRenderer
from rest_framework.request import Request
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from django_countries import countries
from django.template.loader import render_to_string
from django.core.mail import EmailMessage
from django.utils.encoding import force_bytes
from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode
from django.contrib.sites.shortcuts import get_current_site
from django.contrib.auth.tokens import default_token_generator
from .utils import get_keys
from . import models as m
from accounts.otp import verifyOTP, generateOTP, check_email
from rest_auth.views import PasswordResetView


class CountryListAPI(APIView):
    """ Returns the list of all countries """
    renderer_classes = (JSONRenderer,)

    def get(self, request):
        country_lists = []

        for country in countries:
            individual_country = {}
            individual_country['name'] = country[1]
            individual_country['code'] = country[0]
            country_lists.append(individual_country)
        return Response(country_lists)


class StateListAPI(APIView):
    """ Returns the list of states based on a country
    ?country=NG to filter by country - get all state of country code NG
    """
    renderer_classes = (JSONRenderer,)

    def get(self, request):
        country = request.GET.get('country')
        states = []
        if country:
            states = m.State.objects.filter(country=country).values_list('name', flat=True).order_by('name')

        return Response(states)


class VerifyOTP(APIView):
    """ Verify Patient OTP
    """
    permission_classes = (IsAuthenticated,)

    def post(self, request):
        otp = request.data.get("otp", None)
        patient = Patient.objects.get(user=request.user.id)
        if otp:
            if verifyOTP(otp, request.user.id) and patient.email_verified == False:
                patient.email_verified = True
                patient.save()
                return Response("Email verified", status=status.HTTP_200_OK)
            return Response("Email Verification Failed. Email may be already verified or the otp is expire.",
                            status=status.HTTP_400_BAD_REQUEST)
        return Response("Enter OTP", status=status.HTTP_400_BAD_REQUEST)


class ChangeEmail(APIView):
    """ Change Patient email address
    """
    permission_classes = (IsAuthenticated,)

    def post(self, request):
        user = request.user
        email = request.data.get("email", None)
        if email and check_email(email):
            user_check = User.objects.filter(email=email).first()
            if user_check:
                return Response("User with this email already exist", status=status.HTTP_400_BAD_REQUEST)
            mail_subject = 'Verify your email'
            message = render_to_string('partial/change_email.html', {
                'user': user,
                'domain': settings.BASE_URL,
                'uid': urlsafe_base64_encode(force_bytes(user.id)),
                'email': urlsafe_base64_encode(force_bytes(email)),
                'token': default_token_generator.make_token(user),
            })
            to_email = user.email
            email = EmailMessage(
                mail_subject, message, to=[to_email]
            )
            email.send()
            return Response("Email sent for verification", status=status.HTTP_200_OK)
        return Response("Enter valid Email address", status=status.HTTP_400_BAD_REQUEST)


class GenerateOTP(APIView):
    """"Send OTP to Patient to verify Email"""

    def post(self, request):
        user = request.user
        # Send Email for verification
        mail_subject = 'Verify your email'
        message = render_to_string('partial/verify_email.html', {
            'user': user,
            'otp': generateOTP(user.id),
        })
        to_email = user.email
        email = EmailMessage(
            mail_subject, message, to=[to_email]
        )
        email.send()
        return Response("Email sent for verification", status=status.HTTP_200_OK)


class APIKeyView(APIView):

    def get(self, request, format=None):
        service_name = request.query_params.get("service")
        if service_name is None:
            return Response({"message": "Please put in a service parameter"}, status=status.HTTP_400_BAD_REQUEST)

        keys = get_keys(service_name)
        if not keys:
            return Response({"message": f"keys for {service_name} not found",
                             "keys": None, "service": service_name}, status=status.HTTP_404_NOT_FOUND)
        return Response({"message": "successful", "keys": keys, "service": service_name}, status=status.HTTP_200_OK)

class CustomPasswordResetView(PasswordResetView):
    serializer_class = CustomPasswordResetSerializer
    
    
class SupportContactListAPI(APIView):
    """"List Support Contacts"""
    def get(self, request, format=None):
        contacts = m.SupportContact.objects.all()
        return Response(SupportContactSerializer(contacts, many=True).data, status=status.HTTP_200_OK)








class CustomCreateFeedbackMixin(CreateModelMixin, GenericViewSet):
    permission_classes = [IsAuthenticated]

    def post(self, request, *args, **kwargs):
        return self.create(request, *args, **kwargs)


class MentalHealthFeedbackAPI(CustomCreateFeedbackMixin):
    """API View for Mental Health Feedback."""
    queryset = MentalHealthFeedback.objects.all()
    serializer_class = MentalHealthFeedbackSerializer

    def post(self, request, *args, **kwargs):
        """[Create a new Mental Health Feedback]
            :params:
                - user (inherited) (required)
                - subscription (required)
                - session_rating (required) choice field - [1,2,3,4,5]
                - session_review (optional) TEXT
                - follow_up (optional) CHAR
                - no_follow_up_review (optional) TEXT
                - nps_rating (required) choice field - [1-10]
                - nps_review (optional) TEXT
                - is_complete (TRUE or FALSE) BOOLEAN
            """
        return super().post(request, *args, **kwargs)




class MentalHealthFeedbackSerializer(serializers.ModelSerializer):

    class Meta:
        model = MentalHealthFeedback
        read_only_fields = ('user',)

    def create(self, validated_data):
        """Create and return Mental Health Feedback data."""
        return MentalHealthFeedback.objects.create(user=self.context['request'].user,
                                                   is_complete=True,
                                                   **validated_data)


class JoinRequestSerializer(serializers.ModelSerializer):
    partner = serializers.PrimaryKeyRelatedField(queryset=Partner.objects.all(), required=True)
    class Meta:
        model = JoinRequest
        fields = ('partner',)
    def create(self, validated_data):
        patient = self.context['request'].user.patient
        data = {
            "patient": patient,
            **validated_data
        }
        existing_request = JoinRequest.objects.filter(**data)
        # if last JoinRequest is True and patient.partner is None, it means the patient has left previous
        # partnership with this partner. Therefore, a new JoinRequest can be created
        if existing_request and existing_request.last().accepted is True or existing_request.last() is None:
            join_request = JoinRequest.objects.create(**data)
        else:
            join_request = existing_request.last()
        return join_request
    def validate(self, attrs):
        errors = {}
        patient = self.context['request'].user.patient
        if patient.partner:
            errors['partner'] = [
                f"Can't create another partnership join request till you leave current partnership with "
                f"{patient.partner}"
            ]
        if errors:
            raise serializers.ValidationError(errors)
        return attrs
















