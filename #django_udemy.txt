##############################################################################


#9.DYNAMIC PATH SEGMENTS
>>>APP.VIEWS.PY
from django.shortcuts import render
from django.http import HttpResponse, HttpResponseNotFound

def index(request):
    return HttpResponse('welcome Home!')

def contact(request):
    return HttpResponse('Contact us page')

def my_challenges(request, month):
    challenges = None
    if month == 'january':
        challenges = 'This is January!'
    elif month == 'february':
        challenges = 'This is February!'
    elif month == 'march':
        challenges = 'This is March!'
    else:
        return HttpResponseNotFound('Not a supported Month!')    
    return HttpResponse(challenges)   

>>>APP.URLS.PY
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='home'),
    path('contact', views.contact, name='contact'),
    path('<month>', views.my_challenges, name='my-challenges'),
]



#10.PATH CONVERTERS
>>>APP.VIEWS.PY
from django.shortcuts import render
from django.http import HttpResponse, HttpResponseNotFound

def index(request):
    return HttpResponse('welcome Home!')

def int_contact(request, contact):
    return HttpResponse(f'Contact number {contact}.')

def str_contact(request, contact):
    return HttpResponse(f'This is the contact of {contact}.')

>>>APP.URLS.PY
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='home'),
    path('<int:contact>',views.int_contact, name='int-contact'),
    path('<str:contact>', views.str_contact, name='str-contact'),
]


#11.Using Dictionary in view
>>>APP.VIEWS.PY
from django.shortcuts import render
from django.http import HttpResponse, HttpResponseNotFound

tasks = {
    'january': 'Take a walk in january',
    'february': 'Sing a song in february',
    'march': 'Play a sport in march',
    'april': 'Call the tailor in april',
    'may': 'Pray for mary in may',
    'june': 'Go for a marathon in june',
    'july': 'Play the drums in july',
    'august': 'Got to school in august',
    'september': 'Watch a movie in september',
    'october': 'Got to the cinema in october',
    'november': 'Study for exam in november',
    'december': 'Paint the house in december'
}

def index(request):
    return HttpResponse('welcome Home!')

def my_challenges(request, month):
    try:
        challenges = tasks[month]
        return HttpResponse(challenges)   
    except:     
        return HttpResponseNotFound('Not a supported Month!')  

>>>APP.URLS.PY
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='home'),
    path('<month>', views.my_challenges, name='my-challenges'),
]


#12.Using HttpResponseRedirect
>>>APP.VIEWS.PY
from django.shortcuts import render
from django.http import HttpResponse, HttpResponseNotFound, HttpResponseRedirect

tasks = {
    'january': 'Take a walk in january',
    'february': 'Sing a song in february',
    'march': 'Play a sport in march',
    'april': 'Call the tailor in april',
    'may': 'Pray for mary in may',
    'june': 'Go for a marathon in june',
    'july': 'Play the drums in july',
    'august': 'Got to school in august',
    'september': 'Watch a movie in september',
    'october': 'Got to the cinema in october',
    'november': 'Study for exam in november',
    'december': 'Paint the house in december'
}

def index(request):
    return HttpResponse('welcome Home!')

def my_challenges_num(request, month):
    try:
        months = list(tasks.keys())
        selected_month = months[month - 1]
        return HttpResponseRedirect(f"/challenges/{selected_month}")
    except:
        return HttpResponseNotFound('Invalid value for Month')

def my_challenges(request, month):
    try:
        challenges = tasks[month]
        return HttpResponse(challenges)   
    except:     
        return HttpResponseNotFound('Not a supported Month!')   

>>>APP.URLS.PY
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='home'),
    path('<int:month>', views.my_challenges_num, name='my-challenges-num'),
    path('<str:month>', views.my_challenges, name='my-challenges'),
]


#13.Using Reverse Function with Named URLS
>>>APP.VIEWS.PY
from django.shortcuts import render
from django.http import HttpResponse, HttpResponseNotFound, HttpResponseRedirect
from django.urls import reverse

tasks = {
    'january': 'Take a walk in january',
    'february': 'Sing a song in february',
    'march': 'Play a sport in march',
    'april': 'Call the tailor in april',
    'may': 'Pray for mary in may',
    'june': 'Go for a marathon in june',
    'july': 'Play the drums in july',
    'august': 'Got to school in august',
    'september': 'Watch a movie in september',
    'october': 'Got to the cinema in october',
    'november': 'Study for exam in november',
    'december': 'Paint the house in december'
}

def index(request):
    return HttpResponse('welcome Home!')

def my_challenges_num(request, month):
    try:
        months = list(tasks.keys())
        selected_month = months[month - 1]
        redirect = reverse("my-challenges", args=[selected_month])
        return HttpResponseRedirect(redirect)
    except:
        return HttpResponseNotFound('Invalid value for Month')

def my_challenges(request, month):
    try:
        challenges = tasks[month]
        return HttpResponse(challenges)   
    except:     
        return HttpResponseNotFound('Not a supported value for Month!')   

>>>APP.URLS.PY
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='home'),
    path('<int:month>', views.my_challenges_num, name='my-challenges-num'),
    path('<str:month>', views.my_challenges, name='my-challenges'),
]


#14.Using Static HTML 
>>>APP.VIEWS.PY
from django.shortcuts import render
from django.http import HttpResponse, HttpResponseNotFound, HttpResponseRedirect
from django.urls import reverse

tasks = {
    'january': 'Take a walk in january',
    'february': 'Sing a song in february',
    'march': 'Play a sport in march',
    'april': 'Call the tailor in april',
    'may': 'Pray for mary in may',
    'june': 'Go for a marathon in june',
    'july': 'Play the drums in july',
    'august': 'Got to school in august',
    'september': 'Watch a movie in september',
    'october': 'Got to the cinema in october',
    'november': 'Study for exam in november',
    'december': 'Paint the house in december'
}

def index(request):
    return HttpResponse('<h1>Welcome Home!</h1>')

def my_challenges_num(request, month):
    try:
        months = list(tasks.keys())
        selected_month = months[month - 1]
        redirect = reverse("my-challenges", args=[selected_month])
        return HttpResponseRedirect(redirect)
    except:
        return HttpResponseNotFound('<h1>Invalid value for Month</h1>')

def my_challenges(request, month):
    try:
        challenges = f"<h1>{tasks[month]}</h1>"
        return HttpResponse(challenges)   
    except:     
        return HttpResponseNotFound('<h1>Not a supported value for Month!</h1>')   

>>>APP.URLS.PY
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='home'),
    path('<int:month>', views.my_challenges_num, name='my-challenges-num'),
    path('<str:month>', views.my_challenges, name='my-challenges'),
]


#15.Using Static HTML with looping
>>>APP.VIEWS.PY
from django.shortcuts import render
from django.http import HttpResponse, HttpResponseNotFound, HttpResponseRedirect
from django.urls import reverse

tasks = {
    'january': 'Take a walk in january',
    'february': 'Sing a song in february',
    'march': 'Play a sport in march',
    'april': 'Call the tailor in april',
    'may': 'Pray for mary in may',
    'june': 'Go for a marathon in june',
    'july': 'Play the drums in july',
    'august': 'Got to school in august',
    'september': 'Watch a movie in september',
    'october': 'Got to the cinema in october',
    'november': 'Study for exam in november',
    'december': 'Paint the house in december'
}

def index(request):
    list_items = ""
    months = list(tasks.keys())
    for month in months:
        capitalized_month = month.capitalize()
        path = reverse("my-challenges", args=[month])
        list_items += f"<li><a href='{path}'>{capitalized_month}</a></li>" 
        
    response_data = f"<ul>{list_items}</ul>"
    return HttpResponse(response_data)

def my_challenges_num(request, month):
    try:
        months = list(tasks.keys())
        selected_month = months[month - 1]
        redirect = reverse("my-challenges", args=[selected_month])
        return HttpResponseRedirect(redirect)
    except:
        return HttpResponseNotFound('<h1>Invalid value for Month</h1>')

def my_challenges(request, month):
    try:
        challenges = f"<h1>{tasks[month]}</h1>"
        return HttpResponse(challenges)   
    except:     
        return HttpResponseNotFound('<h1>Not a supported value for Month!</h1>')   

>>>APP.URLS.PY
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='home'),
    path('<int:month>', views.my_challenges_num, name='my-challenges-num'),
    path('<str:month>', views.my_challenges, name='my-challenges'),
]


#16.Using render_to_string
>>>APP.VIEWS.PY
from django.shortcuts import render
from django.http import HttpResponse, HttpResponseNotFound, HttpResponseRedirect
from django.urls import reverse
from django.template.loader import render_to_string

tasks = {
    'january': 'Take a walk in january',
    'february': 'Sing a song in february',
    'march': 'Play a sport in march',
    'april': 'Call the tailor in april',
    'may': 'Pray for mary in may',
    'june': 'Go for a marathon in june',
    'july': 'Play the drums in july',
    'august': 'Got to school in august',
    'september': 'Watch a movie in september',
    'october': 'Got to the cinema in october',
    'november': 'Study for exam in november',
    'december': 'Paint the house in december'
}

def index(request):
    list_items = ""
    months = list(tasks.keys())
    for month in months:
        capitalized_month = month.capitalize()
        path = reverse("my-challenges", args=[month])
        list_items += f"<li><a href='{path}'>{capitalized_month}</a></li>" 
        
    response_data = f"<ul>{list_items}</ul>"
    return HttpResponse(response_data)

def my_challenges_num(request, month):
    try:
        months = list(tasks.keys())
        selected_month = months[month - 1]
        redirect = reverse("my-challenges", args=[selected_month])
        return HttpResponseRedirect(redirect)
    except:
        return HttpResponseNotFound('<h1>Invalid value for Month</h1>')

def my_challenges(request, month):
    try:
        challenges = tasks[month]
        response_data = render_to_string("challenges/challenge.html")
        return HttpResponse(response_data)   
    except:     
        return HttpResponseNotFound('<h1>Not a supported value for Month!</h1>')   
    
>>>APP.TEMPLATES.CHALLENGES.CHALLENGE.HTML
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Monthly Challenges</title>
</head>
<body>
    <h1>This month's challenge</h1>
    <h2>Go for a walk everyday!</h2>
</body>
</html>

>>>PROJECT.SETTINGS.PY
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
                BASE_DIR / "challenges" / "templates"
            ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


#17.Using Application definition
>>>PROJECT.SETTINGS.PY
# Application definition

INSTALLED_APPS = [
    'challenges',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]


#18.Using Render Function
>>>APP.VIEWS.PY
from django.shortcuts import render
from django.http import HttpResponse, HttpResponseNotFound, HttpResponseRedirect
from django.urls import reverse

tasks = {
    'january': 'Take a walk in january',
    'february': 'Sing a song in february',
    'march': 'Play a sport in march',
    'april': 'Call the tailor in april',
    'may': 'Pray for mary in may',
    'june': 'Go for a marathon in june',
    'july': 'Play the drums in july',
    'august': 'Got to school in august',
    'september': 'Watch a movie in september',
    'october': 'Got to the cinema in october',
    'november': 'Study for exam in november',
    'december': 'Paint the house in december'
}

def index(request):
    list_items = ""
    months = list(tasks.keys())
    for month in months:
        capitalized_month = month.capitalize()
        path = reverse("my-challenges", args=[month])
        list_items += f"<li><a href='{path}'>{capitalized_month}</a></li>" 
        
    response_data = f"<ul>{list_items}</ul>"
    return HttpResponse(response_data)

def my_challenges_num(request, month):
    try:
        months = list(tasks.keys())
        selected_month = months[month - 1]
        redirect = reverse("my-challenges", args=[selected_month])
        return HttpResponseRedirect(redirect)
    except:
        return HttpResponseNotFound('<h1>Invalid value for Month</h1>')

def my_challenges(request, month):
    try:
        challenges = tasks[month]
        return render(request, "challenges/challenge.html")
    except:     
        return HttpResponseNotFound('<h1>Not a supported value for Month!</h1>')   
    

#19.Using Django Template Language
>>>APP.VIEWS.PY
def my_challenges_num(request, month):
    try:
        months = list(tasks.keys())
        selected_month = months[month - 1]
        redirect = reverse("my-challenges", args=[selected_month])
        return HttpResponseRedirect(redirect)
    except:
        return HttpResponseNotFound('<h1>Invalid value for Month</h1>')

def my_challenges(request, month):
    try:
        challenges = tasks[month]
        return render(request, "challenges/challenge.html", {"challenges": challenges})
    except:     
        return HttpResponseNotFound('<h1>Not a supported value for Month!</h1>') 

>>>APP.TEMPLATES.CHALLENGES.CHALLENGE.HTML
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Monthly Challenges</title>
</head>
<body>
    <h1>This month's challenge</h1>
    <h2>{{challenges}}</h2>
</body>
</html>


#20.Using Dynamic HTML Template
>>>APP.VIEWS.PY
def my_challenges_num(request, month):
    try:
        months = list(tasks.keys())
        selected_month = months[month - 1]
        redirect = reverse("my-challenges", args=[selected_month])
        return HttpResponseRedirect(redirect)
    except:
        return HttpResponseNotFound('<h1>Invalid value for Month</h1>')

def my_challenges(request, month):
    try:
        challenge = tasks[month]
        return render(request, "challenges/challenge.html", {
            "challenge": challenge,
            "month": month.capitalize()
            })
    except:     
        return HttpResponseNotFound('<h1>Not a supported value for Month!</h1>')   
    
>>>APP.TEMPLATES.CHALLENGES.CHALLENGE.HTML
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{month}} Challenge</title>
</head>
<body>
    <h1>{{month}} challenge</h1>
    <h2>{{challenge}}</h2>
</body>
</html>


#21.Using Template Filters
>>>APP.VIEWS.PY
def my_challenges_num(request, month):
    try:
        months = list(tasks.keys())
        selected_month = months[month - 1]
        redirect = reverse("my-challenges", args=[selected_month])
        return HttpResponseRedirect(redirect)
    except:
        return HttpResponseNotFound('<h1>Invalid value for Month</h1>')

def my_challenges(request, month):
    try:
        challenge = tasks[month]
        return render(request, "challenges/challenge.html", {
            "challenge": challenge,
            "month": month
            })
    except:     
        return HttpResponseNotFound('<h1>Not a supported value for Month!</h1>')   
    
>>>APP.TEMPLATES.CHALLENGES.CHALLENGE.HTML
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{month|title}} Challenge</title>
</head>
<body>
    <h1>{{month|title}} challenge</h1>
    <h2>{{challenge}}</h2>
</body>
</html>


#22.Using Template 'for' and 'url' Tags
>>>APP.VIEWS.PY
from django.shortcuts import render
from django.http import HttpResponse, HttpResponseNotFound, HttpResponseRedirect
from django.urls import reverse

tasks = {
    'january': 'Take a walk in january',
    'february': 'Sing a song in february',
    'march': 'Play a sport in march',
    'april': 'Call the tailor in april',
    'may': 'Pray for mary in may',
    'june': 'Go for a marathon in june',
    'july': 'Play the drums in july',
    'august': 'Got to school in august',
    'september': 'Watch a movie in september',
    'october': 'Got to the cinema in october',
    'november': 'Study for exam in november',
    'december': 'Paint the house in december'
}

def index(request):
    months = list(tasks.keys())
    return render(request, 'challenges/index.html', {
        "months": months
    })

def my_challenges_num(request, month):
    try:
        months = list(tasks.keys())
        selected_month = months[month - 1]
        redirect = reverse("my-challenges", args=[selected_month])
        return HttpResponseRedirect(redirect)
    except:
        return HttpResponseNotFound('<h1>Invalid value for Month</h1>')

def my_challenges(request, month):
    try:
        challenge = tasks[month]
        return render(request, "challenges/challenge.html", {
            "challenge": challenge,
            "month": month
            })
    except:     
        return HttpResponseNotFound('<h1>Not a supported value for Month!</h1>')   
  
>>>APP.TEMPLATES.CHALLENGES.INDEX.HTML
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Index</title>
</head>
<body>
    <ul>
        {% for month in months %}
            <li><a href="{% url 'my-challenges' month %}">{{month|upper}}</a></li>
        {% endfor %}
    </ul>
</body>
</html>


#23.Using Template Conditional 'if' Tag
>>>APP.VIEWS.PY
from django.shortcuts import render
from django.http import HttpResponse, HttpResponseNotFound, HttpResponseRedirect
from django.urls import reverse

tasks = {
    'january': 'Take a walk in january',
    'february': 'Sing a song in february',
    'march': 'Play a sport in march',
    'april': 'Call the tailor in april',
    'may': 'Pray for mary in may',
    'june': 'Go for a marathon in june',
    'july': 'Play the drums in july',
    'august': 'Got to school in august',
    'september': 'Watch a movie in september',
    'october': 'Got to the cinema in october',
    'november': 'Study for exam in november',
    'december': None
}

def index(request):
    months = list(tasks.keys())
    return render(request, 'challenges/index.html', {
        "months": months
    })

def my_challenges_num(request, month):
    try:
        months = list(tasks.keys())
        selected_month = months[month - 1]
        redirect = reverse("my-challenges", args=[selected_month])
        return HttpResponseRedirect(redirect)
    except:
        return HttpResponseNotFound('<h1>Invalid value for Month</h1>')

def my_challenges(request, month):
    try:
        challenge = tasks[month]
        return render(request, "challenges/challenge.html", {
            "challenge": challenge,
            "month": month
            })
    except Exception as err:     
        return HttpResponseNotFound(f'''<h1>Sorry, There was an Error!</h1>
                                    <h2>Error: {err}</h2>''')   
    
>>>APP.TEMPLATES.CHALLENGES.CHALLENGE.HTML
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{month|title}} Challenge</title>
</head>
<body>
    <h1>{{month|title}} challenge</h1>
    {% if challenge is not None %}
        <h2>{{challenge}}</h2>
    {% else %}
        <h2>There is no challenge for this month yet.</h2>    
    {% endif %}    
</body>
</html>


#24.Using Template Inheritance - extends and block
>>><PROJECT>TEMPLATES.BASE.HTML
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}App{% endblock %}</title>
</head>
<body>
    {% block content %}{% endblock %}
</body>
</html>

>>>PROJECT.SETTINGS.PY
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
                # BASE_DIR / "challenges" / "templates"
                BASE_DIR / "templates"
            ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

>>>APP.TEMPLATES.CHALLENGES.INDEX.HTML
{% extends 'base.html' %}

{% block title %}All Challenges{% endblock %} 

{% block content %}
    <ul>
        {% for month in months %}
            <li><a href="{% url 'my-challenges' month %}">{{month|upper}}</a></li>
        {% endfor %}
    </ul>
{% endblock %}


>>>APP.TEMPLATES.CHALLENGES.CHALLENGE.HTML
{% extends 'base.html' %}

{% block title %}{{month|title}} Challenge{% endblock %}

{% block content %}
    <h1>{{month|title}} challenge</h1>
    {% if challenge is not None %}
        <h2>{{challenge}}</h2>
    {% else %}
        <h2>There is no challenge for this month yet.</h2>    
    {% endif %}    
{% endblock %}


#25.Using Template Includes function
>>>APP.URLS.PY
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='home'),
    path('<int:month>', views.my_challenges_num, name='my-challenges-num'),
    path('<str:month>', views.my_challenges, name='my-challenges'),
]

>>>APP.TEMPLATES.CHALLENGES.INCLUDES.HEADER.HTML
<header>
    <nav>
        <a href="{% url 'home' %}">All Challenges</a>
    </nav>
</header>    

>>>APP.TEMPLATES.CHALLENGES.CHALLENGE.HTML
{% extends 'base.html' %}

{% block title %}{{month|title}} Challenge{% endblock %}

{% block content %}
    {% include 'challenges/includes/header.html'%}
    <h1>{{month|title}} challenge</h1>
    {% if challenge is not None %}
        <h2>{{challenge}}</h2>
    {% else %}
        <h2>There is no challenge for this month yet.</h2>    
    {% endif %}    
{% endblock %}



#26.Setting 404 page
>>>APP.VIEWS.PY
from django.shortcuts import render
from django.http import Http404, HttpResponse, HttpResponseNotFound, HttpResponseRedirect
from django.urls import reverse
from django.template.loader import render_to_string

tasks = {
    'january': 'Take a walk in january',
    'february': 'Sing a song in february',
    'march': 'Play a sport in march',
    'april': 'Call the tailor in april',
    'may': 'Pray for mary in may',
    'june': 'Go for a marathon in june',
    'july': 'Play the drums in july',
    'august': 'Got to school in august',
    'september': 'Watch a movie in september',
    'october': 'Got to the cinema in october',
    'november': 'Study for exam in november',
    'december': None
}

def index(request):
    months = list(tasks.keys())
    return render(request, 'challenges/index.html', {
        "months": months
    })

def my_challenges_num(request, month):
    try:
        months = list(tasks.keys())
        selected_month = months[month - 1]
        redirect = reverse("my-challenges", args=[selected_month])
        return HttpResponseRedirect(redirect)
    except:
        return HttpResponseNotFound('<h1>Invalid value for Month</h1>')

def my_challenges(request, month):
    try:
        challenge = tasks[month]
        return render(request, "challenges/challenge.html", {
            "challenge": challenge,
            "month": month
            })
    except: 
        response_data = render_to_string("404.html")
        return HttpResponseNotFound(response_data)    
        # raise Http404() 

>>><PROJECT>TEMPLATES.404.HTML
{% extends 'base.html' %}

{% block title %}
    Something went wrong - we could not find that page!
{% endblock %} 

{% block content %}
    <h1>Error: 404 - we could not find that page!</h1>
    <p>Sorry, but we could not find a matching page</p>
{% endblock %}


#Set Models.py file
>>>Models.py
from django.db import models

class Members(models.Model):
    firstname = models.CharField(max_length=50)
    lastname = models.CharField(max_length=50)
    email = models.EmailField(max_length=254)
    password = models.CharField(max_length=50)
    age = models.IntegerField()


Pull Data From The Database

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
</head>
<body>
    <h1>Members Database</h1>
    {% for member in all%}
        <h2>Name: {{member.firstname | title}}</h2>
        <h2>Email: {{member.email | lower}}</h2>
        <h2>Age: {{member.age}}</h2>
        <hr>
    {% endfor %}
</body>
</html>

>>>models.py
from django.db import models

class Member(models.Model):
    firstname = models.CharField(max_length=50)
    lastname = models.CharField(max_length=50)
    email = models.EmailField(max_length=254)
    password = models.CharField(max_length=50)
    age = models.IntegerField()

    def __str__(self):
        return f"{self.firstname} {self.lastname}"


















###########################################################################################################################################################################