##############################################################################

#Database Engines
django.db.backends.postgresql
django.db.backends.mysql
django.db.backends.sqlite3
django.db.backends.oracle

#Example configuration in settings.py
DATABASES = {
  'default': {
     'ENGINE': 'django.db.backends.mysql',
     'NAME': 'databasename',
     'USER': 'username',
     'PASSWORD': 'password',
     'HOST': '127.0.0.1',
     'PORT': '5432',
}

#Model Fields
BooleanField
CharField
DateField
DateTimeField
DecimalField
EmailField
FileField
FloatField
ImageField
IntegerField
TextField

#Relationship Fields
ForeignKey
ManyToManyField

###########################

#Example Model
from django.db import models
from django.utils import timezone

class Make (models.Model):
  name = models.CharField (max_length=15)
  factory_address = models. TextField()
  email = models. EmailField()
  def _str_(self):
     return self.name

class Car(models.Model):
  name = models.CharField (max_length=20)
  active = BooleanField()
  date_added = DateTimeField (default=timezone.now)
  price = FloatField()
  make = models.ForeignKey (Make)
  def _str_(self):
     return self.name

###########################

#Create Objects
from .models import Make, Car
toyota = Make (name='Toyota', factory_address='Somewhere in Japan...',
      email='toyota@toyota.com')
toyota.save()
camry = Car(name='Camry', active=True, price=29999.99, make=toyota)
camry.save()

#Example Queries
Car.objects.get(pk=1) #get car with primary key = 1
Make.objects.all()
Car.objects.filter(name='Camry')
Make.objects.all() [5:10] #offset 5, limit 10
Car.objects.order_by('-name')
Make.objects.filter(name_startswith='Toy')
Car.objects.filter(make_name='Toyota') #relationship query

#Useful Links
Django Website - https://www.djangoproject.com
Pretty Printed Website - http://prettyprinted.com
Pretty Pretty YouTube Channel -
https://www.youtube.com/c/prettyprintedtutorials

###########################

# Automatic primary key fields
By default, Django gives each model an auto-incrementing primary key with the type specified per app in AppConfig.default_auto_field or globally in the DEFAULT_AUTO_FIELD setting. 
For example:

id = models.BigAutoField(primary_key=True)

###########################

# capture requirements to install
pip freeze > requirements.txt

# install requirements from requirements.txt
pip install -r requirements.txt

# Now to remove one by one
pip uninstall -r requirements.txt

# If we want to remove all at once then
pip uninstall -r requirements.txt -y

pip freeze or pip list

$ python manage.py makemigrations

$ python manage.py migrate

$ python manage.py sqlmigrate weblog 0001

$ python manage.py shell

$ pip install django django-shortcuts

pip install django-shortcuts

#PIPENV
pip install pipenv
pipenv --python 3.10.3

pipenv shell
source $(pipenv --venv)/bin/activate

exit

#View location of the virtualenv:
pipenv --venv

pipenv --rm
rm -rf /Users/ifeanyiomeata/.local/share/virtualenvs/docker_drf-yNZHhWWe

###########################

{% if user.is_authenticated %}{% endif %}

#python decouple module

from django.shortcuts import render
from hotel.models import User, Receptionist, Room, RoomStatus, RoomType, Booking, Payment, PaymentType, Reservation

from django.db import models
from django.contrib.auth.models import AbstractUser

class User(AbstractUser):
    username = models.CharField(max_length=64, unique=True)
    email = models.EmailField(max_length=64, unique=True)
    phone_number = models.CharField(max_length=64, unique=True)
    password = models.CharField(max_length=64)
    otp_code = models.CharField(max_length=64, default=None, unique=True, null=True)
    email_verified = models.BooleanField(default=False)
    is_admin = models.BooleanField(default=False)
    is_superadmin = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True, null=True)
    updated_at = models.DateTimeField(auto_now=True, null=True)

    def __str__(self):
        return f'User: {self.username.title()}'

from blog.models import Post
from django.contrib.auth.models import User

AUTH_USER_MODEL = 'hotel.user'

INSTALLED_APPS = [
    'hotel.apps.HotelConfig',
    'aa.apps.AaConfig',
    'booking.apps.BookingConfig',
    'payment.apps.PaymentConfig',
    'logs.apps.LogsConfig',
]

###########################
# rest > models.py:

from django.db import models
from django.contrib.auth.models import AbstractUser


class User(AbstractUser):
    username = models.CharField(max_length=200, unique=True, null=False)
    firstname = models.CharField(max_length=200, null=False)
    lastname = models.CharField(max_length=200, null=False)
    gender = models.CharField(max_length=10, null=False)
    age = models.IntegerField(default=0, null=False)
    password = models.CharField(max_length=200, null=False)

    def __str__(self):
        return f'{self.firstname} {self.lastname}'

###########################

AUTH_USER_MODEL = 'drf.user'

from django.contrib import admin
from .models import User

admin.site.register(User)

#djangorestframework 3.13.1
pip install djangorestframework

###########################
# SERIALIZERS:
# rest > serializers.py:

from rest_framework import serializers
from .models import User

class UserSerializer(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = User
        fields = ('id', 'firstname', 'lastname', 'gender', 'age', 'password')
        
class UserSerializer(serializers.ModelSerializer):

###########################
# rest > views.py:

from django.shortcuts import render
from rest_framework import viewsets
from .models import User
from .serializers import UserSerializer


class UserView(viewsets.ModelViewSet):
    queryset = User.objects.all()
    serializer_class = UserSerializer


###########################
# rest > urls.py:

from django.urls import include, path
from . import views
from rest_framework import routers

router = routers.DefaultRouter()
router.register('rest', views.UserView)

urlpatterns = [
    path('', include(router.urls))
]


###########################

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest.apps.RestConfig',
    'rest_framework',
]

###########################

Shortcuts
# Django
'c'  : 'collectstatic',
'r'  : 'runserver',
'sd' : 'syncdb',
'sp' : 'startproject',
'sa' : 'startapp',
't'  : 'test',

# Shell
'd'  : 'dbshell',
's'  : 'shell',

# Auth
'csu': 'createsuperuser',
'cpw': 'changepassword',

# South
'm'  : 'migrate',
'mm' : 'makemigrations',
'sm' : 'schemamigration',
'dm' : 'datamigration',

# Haystack
'ix' : 'update_index',
'rix': 'rebuild_index',

# Django Extensions
'sk' : 'generate_secret_key',
'rdb': 'reset_db',
'rp' : 'runserver_plus',
'shp': 'shell_plus',
'url': 'show_urls',
'gm' : 'graph_models',
'rs' : 'runscript'

######################################################
######################################################
Django Introduction for Beginners
######################################################
######################################################

from django.contrib import admin
from .models import User

admin.site.register(User)

###########################

from django.shortcuts import render
from .models import Comment

def home(request):
    comments = Comment.objects.order_by('-date_added')
    return render(request, 'bookclub/home.html', {
        "comments" : comments,
    })

###########################

<div class="col-md-3">
    <div class="h-100 p-5 text-white bg-dark rounded-3">
    <h2>{{comment.name}}</h2>
    <p>Comment on:<br> {{comment.date_added | date:"F d, Y"}}.</p>
    </div>
</div>

###########################

forms.py:

from django import forms

class CommentForm(forms.Form):
    name = forms.CharField(max_length=200, 
        widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Name'}))
    title = forms.CharField(max_length=200, 
        widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Title'}))
    comment = forms.CharField(widget=forms.Textarea(attrs={'class': 'form-control'}))

###########################

views.py:

def comment(request):
    form = CommentForm()
    return render(request, 'bookclub/comment.html', {
        "form" : form,
    })

###########################

urls.py:

from django.urls import path
from . import views

urlpatterns = [
    path('', views.home, name='home'),
    path('comment/', views.comment, name='comment'),
    path('register/', views.register, name='register'),
    path('login/', views.login, name='login'),
    path('logout/', views.logout, name='logout'),
]

###########################
views.py:

from django.shortcuts import render, redirect
from .models import Comment
from .forms import CommentForm

def home(request):
    comments = Comment.objects.order_by('-date_added')
    return render(request, 'bookclub/home.html', {
        "comments" : comments,
    })

def comment(request):
    if request.method == 'POST':
        form = CommentForm(request.POST)
        data = request.POST
        
        if form.is_valid():
            instance = Comment(name=data['name'],title=data['title'],comment=data['comment'])
            instance.save()
            return redirect('home')
    else:
        form = CommentForm()
        return render(request, 'bookclub/comment.html', {
            "form" : form,
        })

###########################
home.html:

{% block comment %}
{% for comment in comments %}
<div class="row align-items-md-stretch">
    <div class="col-md-3">
        <div class="h-100 p-5 text-white bg-dark rounded-3">
        <h2>{{comment.name}}</h2>
        <p>Comment on:<br> {{comment.date_added | date:"F d, Y"}}.</p>
        </div>
    </div>
    <div class="col-md-9">
        <div class="h-100 p-5 bg-light border rounded-3">
        <h2>{{comment.title}}</h2>
        <p>{{comment.comment}}</p>
        </div>
    </div>
</div>
<div class="row align-items-md-stretch">
    <div class="col-md-12">
        &nbsp;
    </div>    
</div> 
{% endfor %}   
{% endblock comment %}

###########################
comment.py:

{% extends 'bookclub/base.html' %}

{% block title %}BookClub.io - Comment{% endblock title %}

{% block content %}
<h1>Leave a Comment:</h1>
<form method="POST" action="{% url 'comment' %}">
    {% csrf_token %}
    <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        {% comment %} <input type="text" class="form-control" id="name"> {% endcomment %}
        {{ form.name }}
    </div>
    <div class="mb-3">
        <label for="title" class="form-label">Title</label>
        {{ form.title }}
    </div>
    <div class="mb-3">
        <label for="comment" class="form-label">Comment</label>
        {{ form.comment }}
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</form>
<h1>&nbsp;</h1>
{% endblock content %}

###########################
forms.py:

from django import forms

class CommentForm(forms.Form):
    name = forms.CharField(max_length=200,
        widget=forms.TextInput(attrs={'class': 'form-control','placeholder': 'Full Name...', 'style': 'max-width: 600px', 'id': 'name'}))
    title = forms.CharField(max_length=200, 
        widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Title...', 'style': 'max-width: 600px', 'id': 'title'}))
    comment = forms.CharField(widget=forms.Textarea(attrs={'class': 'form-control', 'placeholder': 'Write your comments here...', 'id': 'comment', 'style': 'max-width: 600px'}))

###########################
models.py:

from django.db import models
from django.utils import timezone

class Comment(models.Model):
    name = models.CharField(max_length=200, default=None)
    title = models.CharField(max_length=200, default=None)
    comment = models.TextField(default=None)
    date_added = models.DateTimeField(default=timezone.now)
    
    def __str__(self):
        return f'<Name: {self.name}, ID: {self.id}>'


######################################################
######################################################
Django Authentication Basics
######################################################
######################################################

python manage.py migrate admin zero
python manage.py migrate auth zero
python manage.py migrate contenttypes zero
python manage.py migrate sessions zero

#Run migrations for your relative app
python manage.py makemigrations users

#Migrate the tables to database
python manage.py migrate


###########################

pip install djangorestframework-simplejwt

settings.py:

REST_FRAMEWORK = {
    'NON_FIELD_ERRORS_KEY': 'error',
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

###########################

.gitignore

python manage.py test

pip install coverage

coverage run manage.py test && coverage report && coverage html

.coveragerc:
[run]
source=authentication/,todos/,
omit=
    venv
    */migrations/*
    */tests/*
    */__init__.py

###########################

Upgrade requirements.txt file

pip install pip-upgrader

pip-upgrade requirements.txt

pip freeze > requirements.txt

pip3 install -r requirements.txt

pip3 install -U -r requirements.txt

# capture requirements to install
pip freeze > requirements.txt

# install requirements from requirements.txt
pip install -r requirements.txt

# Now to remove one by one
pip uninstall -r requirements.txt

# If we want to remove all at once then
pip uninstall -r requirements.txt -y

pip freeze or pip list

$ python manage.py makemigrations

$ python manage.py migrate

$ python manage.py sqlmigrate weblog 0001

$ python manage.py shell

$ pip install django django-shortcuts

pip install django-shortcuts

#PIPENV
pip install pipenv
pipenv --python 3.10.3

pipenv shell
source $(pipenv --venv)/bin/activate

exit

#View location of the virtualenv:
pipenv --venv

pipenv --rm
rm -rf /Users/ifeanyiomeata/.local/share/virtualenvs/docker_drf-yNZHhWWe



curl http://127.0.0.1:8000/api/

###########################

books > view.py:

from django.shortcuts import render
from django.views.generic import ListView
from books.models import Book


class BookListView(ListView):
    model = Book
    template_name = 'book_list.html'

###########################

api > view.py:

from django.shortcuts import render
from rest_framework import generics
from books.models import Book
from api.serializers import BookSerializer

class BookAPIView(generics.ListAPIView): 
    queryset = Book.objects.all() 
    serializer_class = BookSerializer

###########################

books > model.py:

from django.db import models


class Book(models.Model):
    title = models.CharField(max_length=250)
    subtitle = models.CharField(max_length=250)
    author = models.CharField(max_length=100)
    isbn = models.CharField(max_length=13)
    
    def __str__(self):
        return self.title

###########################

books > urls:

from django.urls import include, path
from books.views import BookListView

urlpatterns = [
    path('', BookListView.as_view(), name='home')
]

###########################

api > urls:

from django.urls import path
from api.views import BookAPIView

urlpatterns = [
    path('', BookAPIView.as_view()),
]

###########################

api > serializers.py:

from rest_framework import serializers
from books.models import Book


class BookSerializer(serializers.ModelSerializer): 
    
    class Meta:
        model = Book
        fields = ('title', 'subtitle', 'author', 'isbn')


###########################


REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ]
}

###########################

Cross-Origin Resource Sharing (CORS).

django-cors-headers

pipenv install django-cors-headers==3.1.1

pip install django-cors-headers

• add corsheaders to the INSTALLED_APPS
• addCorsMiddlewareaboveCommonMiddleWareinMIDDLEWARE 
• create a CORS_ORIGIN_WHITELIST

INSTALLED_APPS = [
    'corsheaders', # new
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware', # new
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ORIGIN_WHITELIST = (
    'http://localhost:3000',
    'http://localhost:8000',
)

###########################

brew install node
pip install nodejs

$ npx create-react-app frontend
$ cd frontend
$ npm start

http://127.0.0.1:8000/api/?format=json

$ npm install

$ npm install axios

import axios from 'axios';

###########################

$ cd ~/Desktop && cd code
$ mkdir blogapi && cd blogapi
$ pipenv install django==2.2.6
$ pipenv shell
(blogapi) $ django-admin startproject blog_project .
(blogapi) $ python manage.py startapp posts

(blogapi) $ python manage.py makemigrations posts
(blogapi) $ python manage.py migrate

python manage.py createsuperuser

###########################

views.py:

view -> ListView
view -> DetailView
from rest_framework.generics -> ListAPIView
from rest_framework.generics -> RetrieveAPIView
from rest_framework.generics -> CreateAPIView
from rest_framework.generics -> DestroyAPIView
from rest_framework.generics -> UpdateAPIView
from rest_framework.generics -> ListCreateAPIView
from rest_framework.generics -> RetrieveUpdateAPIView
from rest_framework.generics -> RetrieveDestroyAPIView
from rest_framework.generics -> RetrieveUpdateDestroyAPIView


from django.shortcuts import render
from rest_framework import generics
from .models import Post
from .serializers import PostSerializer


class PostList(generics.ListCreateAPIView): 
    queryset = Post.objects.all() 
    serializer_class = PostSerializer

class PostDetail(generics.RetrieveUpdateDestroyAPIView): 
    queryset = Post.objects.all()
    serializer_class = PostSerializer


###########################

serializers.py:

from rest_framework import serializers 
from .models import Post


class PostSerializer(serializers.ModelSerializer):
    
    class Meta:
        model = Post
        fields = ('id', 'author', 'title', 'body', 'created_at')

###########################

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/v1/', include('posts.urls')),
    path('api-auth/', include('rest_framework.urls')),
]

###########################

permission_classes = (permissions.IsAuthenticated,)

• AllowAny - any user, authenticated or not, has full access
• IsAuthenticated - only authenticated, registered users have access
• IsAdminUser - only admins/superusers have access
• IsAuthenticatedOrReadOnly - unauthorized users can view any page, but only
authenticated users have write, edit, or delete privileges

###########################

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}

###########################

BasicAuthentication
TokenAuthentication
SessionAuthentication
RemoteUserAuthentication
Custom authentication

401 (Unauthorized) 
403 Forbidden status


REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [ 
        'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
}


INSTALLED_APPS = [
    
    # 3rd-party apps
    'rest_framework',
    'rest_framework.authtoken',
    
    # Local
    'posts.apps.PostsConfig',
]

###########################

dj-rest-auth 
django-allauth

pip install dj-rest-auth

INSTALLED_APPS = [

    # 3rd-party apps
    'rest_framework',
    'rest_framework.authtoken',
    'dj_rest_auth',

# Local
    'posts.apps.PostsConfig',
]

###########################

from django.contrib import admin 
from django.urls import include, path

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/v1/', include('posts.urls')),
    path('api-auth/', include('rest_framework.urls')),
    path('dj-rest-auth/', include('dj_rest_auth.urls')),
]


http://127.0.0.1:8000/api/v1/dj-rest-auth/login/

http://127.0.0.1:8000/api/v1/dj-rest-auth/logout/

http://127.0.0.1:8000/api/v1/dj-rest-auth/password/reset/

http://127.0.0.1:8000/api/v1/dj-rest-auth/password/reset/confirm/

###########################

(blogapi) $ pipenv install django-allauth

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites', # new

    # 3rd-party apps
    'rest_framework',
    'rest_framework.authtoken',
    'allauth', # new
    'allauth.account', # new
    'allauth.socialaccount', # new
    'rest_auth',
    'rest_auth.registration', # new

# Local
    'posts.apps.PostsConfig',
]


EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # new
SITE_ID = 1 # new

###########################

from django.contrib import admin 
from django.urls import include, path

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/v1/', include('posts.urls')),
    path('api-auth/', include('rest_framework.urls')),
    path('api/v1/dj-rest-auth/', include('dj_rest_auth.urls')),
    path('api/v1/dj-rest-auth/registration/', include('dj_rest_auth.registration.urls')),
]


http://127.0.0.1:8000/api/v1/dj-rest-auth/registration/

dj-rest-auth
django-allauth 

###########################

freeze > requirements.txt && pipenv install -r requirements.txt

#PIPENV
pip install pipenv
pipenv --python 3.10.3

pipenv shell
source $(pipenv --venv)/bin/activate

pipenv install
pipenv install --ignore-pipfile

exit

#View location of the virtualenv:
pipenv --venv

pipenv --rm
rm -rf /Users/ifeanyiomeata/.local/share/virtualenvs/docker_drf-yNZHhWWe

Commands:
  check      Checks for PyUp Safety security vulnerabilities and against PEP
             508 markers provided in Pipfile.
  clean      Uninstalls all packages not specified in Pipfile.lock.
  graph      Displays currently-installed dependency graph information.
  install    Installs provided packages and adds them to Pipfile, or (if no
             packages are given), installs all packages from Pipfile.
  lock       Generates Pipfile.lock.
  open       View a given module in your editor.
  run        Spawns a command installed into the virtualenv.
  scripts    Lists scripts in current environment config.
  shell      Spawns a shell within the virtualenv.
  sync       Installs all packages specified in Pipfile.lock.
  uninstall  Uninstalls a provided package and removes it from Pipfile.
  update     Runs lock, then sync.
  verify     Verify the hash in Pipfile.lock is up-to-date.

###########################

git remote add origin git@bitbucket.org:<USER>/hello-world.git
git push -u origin master

python -m venv venv

# pages_project/settings.py
TEMPLATES = [
    {
        ...
        'DIRS': [os.path.join(BASE_DIR, 'templates')], # new
        ...
}, ]


TemplateView
GenericView
ListView
DetailView

(pages) $ git remote add origin git@bitbucket.org:wsvincent/pages-app.git
(pages) $ git push -u origin master

rm -fr $(brew --repo homebrew/core)  # because you can't `brew untap homebrew/core`
brew tap homebrew/core

$ brew tap heroku/brew && brew install heroku
$ brew install heroku

• updatePipfile.lock
• make a new Procfile file
• install gunicorn as our web server
• make aone-line change to settings.py file

[requires]
python_version = "3.7"

(pages) $ pipenv lock

(pages) $ touch Procfile
web: gunicorn pages_project.wsgi --log-file -

(pages) $ pipenv install gunicorn==19.9.0

# pages_project/settings.py
ALLOWED_HOSTS = ['*']

(pages) $ git status
(pages) $ git add -A
(pages) $ git commit -m "New updates for Heroku deployment"

(pages) $ git push -u origin master

• create a new app on Heroku and push our code to it
• add a git remote “hook” for Heroku
• configure the app to ignore static files, which we’ll cover in later chapters • start the Heroku server so the app is live
• visit the app on Heroku’s provided URL

(pages) $ heroku create
Creating app... done, ฀ fathomless-hamlet-26076
https://fathomless-hamlet-26076.herokuapp.com/ |
https://git.heroku.com/fathomless-hamlet-26076git

(pages) $ heroku git:remote -a fathomless-hamlet-26076

You should replace fathomless-hamlet-26076 with the app name Heroku provides.

(pages) $ heroku config:set DISABLE_COLLECTSTATIC=1

(pages) $ git push heroku master

(pages) $ heroku ps:scale web=􏰇

(pages) $ heroku open

###########################

$ git config --list --show-origin

$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com

git remote add origin https://omeatai@bitbucket.org/omeatai/pages-app.git
git push -u origin main

cdBXz9h5YQ47Eq44fFqj

heroku login

• updatePipfile.lock
• make a new Procfile file
• install gunicorn as our web server
• make aone-line change to settings.py file

[requires]
python_version = "3.10"

• updatePipfile.lock
(pages) $ pipenv lock

• make a new Procfile file
(pages) $ touch Procfile
web: gunicorn pages_project.wsgi --log-file -

• install gunicorn as our web server
pipenv install gunicorn==19.9.0

(pages) $ git status
(pages) $ git add -A
(pages) $ git commit -m "New updates for Heroku deployment"

• create a new app on Heroku and push our code to it
• add a git remote “hook” for Heroku
• configure the app to ignore static files, 
which we’ll cover in later chapters • start the Heroku server so the app is live
• visit the app on Heroku’s provided URL

(pages) $ heroku create
agile-bastion-21993
https://agile-bastion-21993.herokuapp.com/ | 
https://git.heroku.com/agile-bastion-21993.git

(pages) $ heroku git:remote -a agile-bastion-21993
set git remote heroku to https://git.heroku.com/agile-bastion-21993.git

(pages) $ heroku config:set DISABLE_COLLECTSTATIC=1

(pages) $ git push heroku main
(pages) $ git push origin main

(pages) $ heroku ps:scale web=􏰇

(pages) $ heroku open


###########################

• create a new directory for our code on the Desktop called mb 
• install Django in a new virtual environment
• create a new project called mb_project
• create a new app call posts
• updatesettings.py


###########################

CREATE
>>> from fundamentals.models import (Reporter, Article)
>>> record = Reporter(full_name='Tom Hadley')
>>> record.save()

UPDATE
>>> record.full_name = 'Sally Hadley'
>>> record.save()

READ
>>> record = Blog.objects.get(pk=3)
>>> record
<Blog: New Blog>
>>> record.name
'New Blog'
>>> record.tagline
'Hey! This is a tagline.'

UPDATE(2)
>>> from fundamentals.models import (Blog, Author, Entry)
>>> Blog.objects.all()
<QuerySet [<Blog: The sway of the sea>, <Blog: The Comet>, <Blog: New Blog>, <Blog: Welcome to Lagos>]>
>>> Author.objects.all()
<QuerySet [<Author: Frank Zola>, <Author: Mary Slessor>]>
>>> Entry.objects.all()
<QuerySet [<Entry: The Sway of the sea>, <Entry: The Comet>]>
>>> record_blog = Blog.objects.get(name='Welcome to Lagos')
>>> record_entry = Entry.objects.get(pk=1)
>>> record_entry.blog = record_blog
>>> record_entry.save()
>>> record_blog = Blog.objects.get(name='Welcome to Lagos')
>>> record_blog
<Blog: Welcome to Lagos>
>>> record_entry = Entry.objects.get(pk=1)
>>> record_entry
<Entry: The Sway of the sea>
>>> record_entry.headline = record_blog.name
>>> record_entry.save()
>>>

UPDATE(3)-DATE
>>> Entry.objects.get(pk=1).pub_date
datetime.date(2022, 4, 18)
>>> from datetime import datetime, date
>>> record_entry = Entry.objects.get(pk=1)
>>> record_entry.pub_date = date.today()
>>> record_entry.save()
>>> record_entry.pub_date = date(2022, 4, 14)
>>> record_entry.save()
>>>

CREATE(2)/ManyToManyField

>>> from datetime import datetime, date
>>> record_entry = Entry()
>>> Blog.objects.all()
<QuerySet [<Blog: The sway of the sea>, <Blog: The Comet>, <Blog: New Blog>, <Blog: Welcome to Lagos>]>
>>> Blog.objects.all()[2]
<Blog: New Blog>
>>> record_entry.blog = Blog.objects.all()[2]
>>> record_entry.headline = 'This is the new Blog'
>>> record_entry.body_text = 'This is the new Body Text'
>>> record_entry.pub_date = date.today()
>>> record_author_1 = Author.objects.get(pk=1)
>>> record_author_2 = Author.objects.get(pk=2)
>>> record_author_3 = Author.objects.create(name='Benjamin', email='ben@gmail.com')
>>> record_entry.save()
>>> record_entry.authors.add(record_author_1,record_author_2,record_author_3)
>>> record_entry.save()

>>> john = Author.objects.create(name="John")
>>> paul = Author.objects.create(name="Paul")
>>> george = Author.objects.create(name="George")
>>> ringo = Author.objects.create(name="Ringo")
>>> entry.authors.add(john, paul, george, ringo)

exact
iexact
contains
icontains
startswith
endswith
istartswith
iendswith

Blog.objects.get(id__exact=14)
Blog.objects.get(name__iexact="beatles blog")
Entry.objects.get(headline__contains='Lennon')
There’s also a case-insensitive version, icontains.
startswith, endswith
There are also case-insensitive versions called istartswith and iendswith.

all()
get()
filter()
exclude()
order_by()
reverse()
distinct()
values()
values_list()
all()
union()
intersection()
difference()

>>> qs1.union(qs2, qs3)

filter(**kwargs)
Returns a new QuerySet containing objects that match the given lookup parameters.

exclude(**kwargs)
Returns a new QuerySet containing objects that do not match the given lookup parameters.


this returns the first 5 objects (LIMIT 5):
>>> Entry.objects.all()[:5]

This returns the sixth through tenth objects (OFFSET 5 LIMIT 5):
>>> Entry.objects.all()[5:10]


>>> from fundamentals.models import (Reporter, Article)
>>> Reporter.objects.all()
<QuerySet [<Reporter: Benjamin Slayer>, <Reporter: Candice Jones>, <Reporter: Sally Hadley>]>
>>> record_reporter = Reporter(full_name='John Smith')
>>> record_reporter.save()
>>> record_reporter.id
4
>>> record_reporter.full_name
'John Smith'
>>> Reporter.objects.get(id=4)
<Reporter: John Smith>
>>> Reporter.objects.get(full_name__startswith='John')
<Reporter: John Smith>
>>> Reporter.objects.get(full_name__contains='mith')
<Reporter: John Smith>

>>> from datetime import date
>>> record_article = Article(pub_date=date.today(),headline='Django is cool',content='really really cool',reporter=record_reporter)
>>> record_article.save()
>>> Article.objects.all()
<QuerySet [<Article: The end of time>, <Article: Why are there people>, <Article: Django is cool>]>
>>> record_reporter.full_name
'John Smith'
>>> record_article.reporter.full_name
'John Smith'
>>>
>>>
>>> record_reporter.article_set.all()
<QuerySet [<Article: Django is cool>]>
>>> Article.objects.filter(reporter__full_name__startswith='John')
<QuerySet [<Article: Django is cool>]>
>>>
>>>
>>> record_reporter
<Reporter: John Smith>
>>> record_reporter.full_name='Ben Carson'
>>> record_reporter.save()
>>> record_reporter
<Reporter: Ben Carson>
>>>
>>>


###########################


{
    messages.DEBUG: 'debug',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'error',
}

###########################
print(movies)
<QuerySet [<Movie: The Game>, <Movie: Seaside Hawksaw>, <Movie: The Blaze>]>

print(movies.values())
<QuerySet [{'id': 1, 'name': 'The Game', 'description': '1998. Action.', 'active': True}, {'id': 2, 'name': 'Seaside Hawksaw', 'description': '2020. Horror.', 'active': True}, {'id': 3, 'name': 'The Blaze', 'description': '2021.Action.', 'active': True}]>

print(list(movies.values()))
[{'id': 1, 'name': 'The Game', 'description': '1998. Action.', 'active': True}, {'id': 2, 'name': 'Seaside Hawksaw', 'description': '2020. Horror.', 'active': True}, {'id': 3, 'name': 'The Blaze', 'description': '2021.Action.', 'active': True}]

json.loads() takes in a string and returns a json object.

json.dumps() takes in a json object and returns a string.

###########################

from django.shortcuts import render
from .models import Movie
from django.http import HttpResponse, JsonResponse


def movie_list(request):
    if request.method == 'GET':
        movies = Movie.objects.all()
        data = {
            "Movies": list(movies.values())
            }
        return JsonResponse(data)

###########################
             Serialization                     Json Rendering
   Queryset     ----->      Python Dictionary     ----->       Json Data
 (Model Object)              (Python Object)                 (Json Object)
            DeSerialization                     Json Parsing
   Queryset     <-----      Python Dictionary     <-----       Json Data
 (Model Object)              (Python Object)                 (Json Object)


Function Based Views
@api_view()

Class Based Views
- Generic views
- Mixins
- Concrete View Classes
- ViewSets

DRF Browsable API
Postman
HTTPie

###########################































###########################################################################################################################################################################